import org.gradle.api.internal.project.ProjectInternal
import org.gradle.tooling.provider.model.ToolingModelBuilderRegistry
import org.jetbrains.plugins.gradle.tooling.internal.ExtraModelBuilder
import org.gradle.util.*

System.setProperty("idea.active", "true")
initscript {
  dependencies {
    classpath files(["G:/tools/Android/Android Studio/plugins/Kotlin/lib/kapt3-idea.jar","G:/tools/Android/Android Studio/lib/external-system-rt.jar","G:/tools/Android/Android Studio/lib/kotlin-runtime.jar","G:/tools/Android/Android Studio/plugins/Kotlin/lib/allopen-ide-plugin.jar","G:/tools/Android/Android Studio/plugins/Kotlin/lib/noarg-ide-plugin.jar","G:/tools/Android/Android Studio/plugins/Kotlin/lib/android-extensions-ide.jar","G:/tools/Android/Android Studio/plugins/gradle/lib/gradle-tooling-extension-impl.jar","G:/tools/Android/Android Studio/lib/groovy-all-2.4.12.jar","G:/tools/Android/Android Studio/plugins/gradle/lib/guava-jdk5-17.0.jar","G:/tools/Android/Android Studio/plugins/Kotlin/lib/sam-with-receiver-ide-plugin.jar","G:/tools/Android/Android Studio/plugins/Kotlin/lib/kotlin-plugin.jar","G:/tools/Android/Android Studio/lib/gson-2.8.2.jar","G:/tools/Android/Android Studio/plugins/Kotlin/lib/kotlin-gradle-tooling.jar","G:/tools/Android/Android Studio/plugins/gradle/lib/gradle-tooling-extension-api.jar"])
  }
}

apply plugin: JetGradlePlugin

class JetGradlePlugin implements Plugin<Gradle> {
  void apply(Gradle gradle) {
    def extraModelBuilderInstance = new ExtraModelBuilder()
    def isCompositeBuildsSupported = GradleVersion.current() >= GradleVersion.version("3.1")
    def isOldGradle = !isCompositeBuildsSupported && GradleVersion.current() <= GradleVersion.version("2.13")
    Set<ToolingModelBuilderRegistry> rootRegistries = new HashSet<>()
    Set<ToolingModelBuilderRegistry> registries = new HashSet<>()
    if (isOldGradle) {
      gradle.allprojects { project ->
        registries.add(((ProjectInternal)project).services.get(ToolingModelBuilderRegistry.class))
      }
    }
    else {
      gradle.rootProject { project ->
        registries.add(((ProjectInternal)project).services.get(ToolingModelBuilderRegistry.class))
        try {
          if (isCompositeBuildsSupported) {
            project.gradle.includedBuilds.each {
              registries.add(it.configuredBuild.services.get(ToolingModelBuilderRegistry.class))
            }
          }
        }
        catch (ignore) {
        }
      }
    }
    gradle.rootProject {
      registries.each {
        def registry = it
        while(registry.hasProperty('parent') && registry.parent != null) {
          registry = registry.parent
        }
        rootRegistries.add(registry)
      }
      rootRegistries.each {
        if (it.hasProperty('builders') && it.builders instanceof Collection &&
            (it.builders as Collection).find { it instanceof ExtraModelBuilder} != null) {
          return
        }
        it.register(extraModelBuilderInstance)
      }
    }
  }
}
